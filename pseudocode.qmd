---
title: "Pseudocode: Craps Simulation"
output: html_document
---

# Instructor Comments

I have scaffolded this set of instructions very carefully. 

Please proceed sequentially through this document, and do not move onto the next step until you have completed the present step.

My goal in this class is to teach you how to solve hard problems by breaking them down. 
This assignment is the culmination of that process, where you demonstrate that you have the tools to solve these hard problems. 

You WILL get confused and miss steps if you do not follow the instructions sequentially.

# Understanding the game flow

ChatGPT provides the following pseudocode for playing a game of craps. 
You can see the full script [here](deps/ChatGPT Pseudocode.html) (it goes a bit beyond pseudocode).

Note that this pseudocode seems to be relatively Pythonic. 
You will have the opportunity to write (somewhat different) pseudocode later, but for now, work with this pseudocode to develop an understanding of the game.

```{}
function playCraps():
    while true:
        // Roll the dice
        roll = rollDice()

        // Check the outcome of the roll
        if isComeOutRoll(roll):
            handleComeOutRoll(roll)
        else:
            handlePointRoll(roll)

        // Display current status and ask if the player wants to continue
        displayCurrentStatus()
        if not playAgain():
            break

function rollDice():
    die1 = random(1, 6)
    die2 = random(1, 6)
    total = die1 + die2
    return total

function isComeOutRoll(roll):
    return roll in [2, 3, 7, 11, 12]

function handleComeOutRoll(roll):
    if roll in [7, 11]:
        playerWins()
    elif roll in [2, 3, 12]:
        playerLoses()
    else:
        point = roll
        displayPointMessage(point)
        handlePointRoll(point)

function handlePointRoll(point):
    while true:
        roll = rollDice()

        if roll == point:
            playerWins()
            break
        elif roll == 7:
            playerLoses()
            break

function playerWins():
    displayWinMessage()

function playerLoses():
    displayLoseMessage()

function displayPointMessage(point):
    // Display the point for the current round

function displayWinMessage():
    // Display a message indicating the player has won

function displayLoseMessage():
    // Display a message indicating the player has lost

function displayCurrentStatus():
    // Display the current status of the game

function playAgain():
    // Ask the player if they want to play again
    // Return True if the player wants to play again, False otherwise

```

## Flowchart {#sec-flowchart}

Create a flowchart illustrating how the game unfolds, using the function names provided in the ChatGPT code. 
Include this as a PNG file in the repository and link to it here.

![flowchart of Craps](Copy of Roll 2 dice(2).png)


## Single game data structure {#sec-single-game-data}

It's one thing to write a set of instructions/pseudocode for how to *play* a game, but it's a separate task to figure out how to **computationally simulate** the game. 
For instance, in a simulation you often need to keep track of each move, and then compute summary statistics about the game to use when compiling simulation data.

Draw/sketch a tabular data structure that can store the results as you progress through a single game of craps. Keep track of how many times you've rolled the dice.
What additional columns do you need? 
Hint: Each roll of the 2 dice should be a row.

| Roll Number | Die 1 | Die 2 | Total Roll | Roll Type       | Point Value | Outcome          | Point Hit Count | Seven Count | Win/Loss Indicator |
|-------------|-------|-------|------------|-----------------|-------------|------------------|-----------------|-------------|---------------------|
| 1           | 3     | 4     | 7          | Come-Out Roll   | -           | Win              | 0               | 0           | 1                   |
| 2           | 5     | 2     | 7          | Come-Out Roll   | -           | Lose             | 0               | 1           | 0                   |
| 3           | 4     | 4     | 8          | Come-Out Roll   | 8           | Continue to Point| 1               | 0           | -                   |
| 4           | 3     | 5     | 8          | Point Phase     | 8           | Win              | 2               | 0           | 1                   |
| 5           | 2     | 3     | 5          | Come-Out Roll   | 5           | Continue to Point| 0               | 0           | -                   |
| 6           | 4     | 3     | 7          | Point Phase     | 5           | Lose             | 0               | 1           | 0                   |


## Summary data structure {#sec-game-summary-data}

Draw/sketch a summary tabular data structure to store summary information from a single game of craps.    
Hint: Each game of craps should yield a single row in your table.

| Game ID | Total Rolls | Point Established | Game Outcome | Wins | Losses |
|---------|-------------|-------------------|--------------|------|--------|
| 1       | 6           | Yes              | Win          | 1    | 0      |
| 2       | 5           | No               | Loss         | 0    | 1      |



# Simulating a game of craps {#sec-simulation-pseudocode}

In this part of the assignment, you'll spend the time figuring out how to implement craps as a computational simulation by adapting the ChatGPT pseudocode. 
Your code structure will be different from ChatGPT's structure because you are going to generate data to estimate various conditional probabilities.

**Requirement 1:**    
You must have a function to simulate a single craps game, `simulate_craps_game`, which returns a data frame with at least the following columns: 

- `id` (# times the dice has been rolled)
- `roll` (the total roll of the dice)
- `outcome` (win, loss, or continue)

You may have additional columns if you want.

```{r}
#start the game by rolling the two dice
roll_dice <- function() {
  # Input: None
  # Output: an integer from 2 to 12
  # Description: Generates two random numbers from 1 to 6, sums them, and returns the result
  die1 <- sample(1:6, 1)
  die2 <- sample(1:6, 1)
  return(die1 + die2)
}
```

```{r}
simulate_craps_game <- function() {
  # Input: None
  # Output: A data frame with columns `id`, `roll`, `outcome`
  # Description: Simulates a single game of craps, tracking each roll and the gameâ€™s progress
  
  rolls <- data.frame(id = integer(), roll = integer(), outcome = character())
  point <- NA  # Initially, there is no point
  
  id <- 1
  roll <- roll_dice()
  
  if (roll == 7 || roll == 11) {
    outcome <- "win"
    rolls <- rbind(rolls, data.frame(id = id, roll = roll, outcome = outcome))
    return(rolls)
  } else if (roll == 2 || roll == 3 || roll == 12) {
    outcome <- "loss"
    rolls <- rbind(rolls, data.frame(id = id, roll = roll, outcome = outcome))
    return(rolls)
  } else {
    point <- roll
    rolls <- rbind(rolls, data.frame(id = id, roll = roll, outcome = "continue"))
    id <- id + 1
  }
  
  # Enter Point Phase
  repeat {
    roll <- roll_dice()
    if (roll == point) {
      outcome <- "win"
      rolls <- rbind(rolls, data.frame(id = id, roll = roll, outcome = outcome))
      break
    } else if (roll == 7) {
      outcome <- "loss"
      rolls <- rbind(rolls, data.frame(id = id, roll = roll, outcome = outcome))
      break
    } else {
      rolls <- rbind(rolls, data.frame(id = id, roll = roll, outcome = "continue"))
      id <- id + 1
    }
  }
  
  return(rolls)
}

```

```{r}
run_craps_simulation <- function(N) {
  # Input: N, the number of games to simulate
  # Output: A data frame with summary information for each game
  # Description: Runs N games of craps, generating a summary for each game
  
  simulations <- data.frame()
  
  for (i in 1:N) {
    game_data <- simulate_craps_game()
    game_summary <- summarize_craps_game(game_data)
    simulations <- rbind(simulations, game_summary)
  }
  
  return(simulations)
}

```



**Requirement 2:**    
You must include a summary function named `summarize_craps_game` that takes the data frame returned by `simulate_craps_game` and generates a single row with the following columns:

- `n_rolls`, the number of times the dice were rolled in the game,
- `outcome`, whether the game was won or lost
- `point`, the total of the dice on the first roll, if the game continued past the first roll, and NA otherwise.

```{r}
summarize_craps_game <- function(game_data) {
  # Input: A data frame from simulate_craps_game
  # Output: A single-row data frame summarizing the game
  # Description: Computes summary statistics for a single game, including total rolls, final outcome, and point
  
  n_rolls <- nrow(game_data)
  outcome <- game_data$outcome[n_rolls]  # Outcome of the last roll
  point <- ifelse(game_data$outcome[1] == "continue", game_data$roll[1], NA)
  
  summary <- data.frame(
    n_rolls = n_rolls,
    outcome = outcome,
    point = point
  )
  
  return(summary)
}

```


**Requirement 3:**    
You must include a function to run your simulation, `run_craps_simulation(N)` that takes a single integer argument `N` which determines the number of games which will be played. 

Think carefully about how you want to structure your code - do you want to return the full results for each game and then summarize, or do you want to summarize before you return the full results?

```{r}
run_craps_simulation <- function(N) {
  # Create an empty list to store summaries
  simulation_list <- vector("list", N)
  
  for (i in 1:N) {
    game_data <- simulate_craps_game()          # Run a single game
    game_summary <- summarize_craps_game(game_data) # Summarize it
    simulation_list[[i]] <- game_summary        # Store only the summary
  }
  
  # Combine all summaries into a data frame
  simulations <- bind_rows(simulation_list)
  return(simulations)  # Returns only summaries
}
```



## Planning Helper Functions {#sec-helper}

Consider helper functions you will need to write to implement the game of craps. 
For each function, define the input, output, and provide a comment to explain what the function will do.

Here is pseudocode for a function that simulates the roll of the dice in craps to demonstrate the required format.

```
roll_dice <- function() {
  # Input: None
  # Output: an integer from 1:12
  # Description: Generate 2 random integers from 1 to 6 and sum them
}
```

Put each function in a separate code block.

```{r}
is_come_out_win <- function(roll) {
  # Input: roll, an integer representing the sum of two dice
  # Output: TRUE if the roll is 7 or 11, FALSE otherwise
  # Description: Checks if the come-out roll results in an immediate win
  return(roll == 7 || roll == 11)
}
```
```{r}
is_come_out_loss <- function(roll) {
  # Input: roll, an integer representing the sum of two dice
  # Output: TRUE if the roll is 2, 3, or 12, FALSE otherwise
  # Description: Checks if the come-out roll results in an immediate loss
  return(roll == 2 || roll == 3 || roll == 12)
}
```

```{r}
play_point_phase <- function(point) {
  # Input: point, an integer representing the established point
  # Output: a list with 'outcome' (win or loss) and 'n_rolls' (number of rolls in this phase)
  # Description: Continues rolling until either the point or a 7 is rolled
  n_rolls <- 0
  repeat {
    roll <- roll_dice()
    n_rolls <- n_rolls + 1
    if (roll == point) {
      return(list(outcome = "win", n_rolls = n_rolls))
    } else if (roll == 7) {
      return(list(outcome = "loss", n_rolls = n_rolls))
    }
  }
}
```

```{r}
simulate_single_roll <- function(id) {
  # Input: id, an integer indicating the roll number in the game
  # Output: a data frame with the roll's ID, total roll, and initial outcome (win, loss, or continue)
  # Description: Simulates a single roll and returns its result in a standardized format
  roll <- roll_dice()
  if (is_come_out_win(roll)) {
    return(data.frame(id = id, roll = roll, outcome = "win"))
  } else if (is_come_out_loss(roll)) {
    return(data.frame(id = id, roll = roll, outcome = "loss"))
  } else {
    return(data.frame(id = id, roll = roll, outcome = "continue"))
  }
}

```

```{r}
play_again <- function() {
  # Input: None
  # Output: TRUE if the player wants to play again, FALSE otherwise
  # Description: Asks the player if they want to continue playing
  response <- readline(prompt = "Do you want to play again? (yes/no): ")
  return(tolower(response) == "yes")
}
```

## Planning Main Functions {#sec-main-function-diagram}

Update your flowchart from @sec-flowchart to match the requirements of this section. 
Your flowchart should have separate blocks for each function. 
Which helper function(s) will be called inside each required function?

![updated craps flowcart](updated Craps(1).png)

## Simulating a full game {#sec-game-pseudocode}

Fill in the pseudocode below to specify how you would return the single game data structure you created in @sec-single-game-data above. 
Remember to fill in the input parameter inside the function definition as well as the comment.

```{r}
simulate_craps_game <- function() {
  # Input: None
  # Output: A data frame with columns 'Roll Number', 'Die 1', 'Die 2', 'Total Roll', 'Roll Type', 
  #         'Point Value', 'Outcome', 'Point Hit Count', 'Seven Count', 'Win/Loss Indicator'
  # Description: Simulates a single game of craps, recording each roll's outcome and game status 
  #              in a data frame until the game ends in a win or loss.

  # Initialize an empty data frame to store each roll's information
  game_data <- data.frame(
    Roll_Number = integer(),
    Die_1 = integer(),
    Die_2 = integer(),
    Total_Roll = integer(),
    Roll_Type = character(),
    Point_Value = integer(),
    Outcome = character(),
    Point_Hit_Count = integer(),
    Seven_Count = integer(),
    Win_Loss_Indicator = integer()
  )

  # Step 1: Roll the dice for the come-out roll
  # Generate two random numbers for Die 1 and Die 2, and calculate Total Roll
  roll <- roll_dice()
  die1 <- roll$Die_1
  die2 <- roll$Die_2
  total_roll <- die1 + die2
  roll_type <- "Come-Out Roll"
  point_value <- NA  # Point isn't established on the first roll
  point_hit_count <- 0
  seven_count <- 0
  outcome <- ""
  
  # Check the result of the come-out roll
  if (total_roll == 7 || total_roll == 11) {
    outcome <- "Win"
    win_loss_indicator <- 1
  } else if (total_roll == 2 || total_roll == 3 || total_roll == 12) {
    outcome <- "Loss"
    win_loss_indicator <- 0
  } else {
    # Otherwise, establish the point
    point_value <- total_roll
    outcome <- "Continue to Point"
    win_loss_indicator <- NA  # Game hasn't ended yet
  }
  
  # Record the come-out roll in game_data
  game_data <- rbind(game_data, data.frame(
    Roll_Number = 1,
    Die_1 = die1,
    Die_2 = die2,
    Total_Roll = total_roll,
    Roll_Type = roll_type,
    Point_Value = point_value,
    Outcome = outcome,
    Point_Hit_Count = point_hit_count,
    Seven_Count = seven_count,
    Win_Loss_Indicator = win_loss_indicator
  ))

  # Step 2: If game continues, enter the Point Phase
  roll_number <- 2
  while (outcome == "Continue to Point") {
    roll <- roll_dice()
    die1 <- roll$Die_1
    die2 <- roll$Die_2
    total_roll <- die1 + die2
    roll_type <- "Point Phase"
    
    # Check if the roll matches the point or is a 7
    if (total_roll == point_value) {
      outcome <- "Win"
      win_loss_indicator <- 1
      point_hit_count <- point_hit_count + 1
    } else if (total_roll == 7) {
      outcome <- "Loss"
      win_loss_indicator <- 0
      seven_count <- seven_count + 1
    } else {
      outcome <- "Continue"
      point_hit_count <- point_hit_count
      seven_count <- seven_count
    }

    # Record each roll in the game_data
    game_data <- rbind(game_data, data.frame(
      Roll_Number = roll_number,
      Die_1 = die1,
      Die_2 = die2,
      Total_Roll = total_roll,
      Roll_Type = roll_type,
      Point_Value = point_value,
      Outcome = outcome,
      Point_Hit_Count = point_hit_count,
      Seven_Count = seven_count,
      Win_Loss_Indicator = win_loss_indicator
    ))

    # Increment roll number
    roll_number <- roll_number + 1
  }

  # Step 3: Return the game data frame
  return(game_data)
}

```

##Summarizing a game {#sec-game-summary-pseudocode}

Add a function that summarizes a game of craps (e.g. go from the data structure in @sec-single-game-data to the data structure in @sec-game-summary-data).

```{r}
summarize_craps_game <- function(game_data) {
  # Input: 
  #   - game_data: A data frame containing detailed information for each roll in a single game
  # Output: 
  #   - A single-row data frame with columns such as 'Game ID', 'Total Rolls', 'Point Established', 
  #     'Game Outcome', 'Wins', and 'Losses'
  # Description: 
  #   - Summarizes a single game of craps by computing the total rolls, whether a point was established, 
  #     the final game outcome, and the count of wins and losses.
  
  # Step 1: Calculate the total number of rolls in the game
  total_rolls <- nrow(game_data)
  
  # Step 2: Determine if a point was established in the game
  # Check if the 'Point Value' column has any non-NA values
  point_established <- any(!is.na(game_data$Point_Value))
  
  # Step 3: Determine the final outcome of the game
  # Check the last row of the 'Outcome' column for 'Win' or 'Loss'
  game_outcome <- game_data$Outcome[total_rolls]
  
  # Step 4: Calculate the total number of wins and losses
  # If the final outcome is 'Win', set Wins to 1 and Losses to 0, otherwise set Wins to 0 and Losses to 1
  wins <- if (game_outcome == "Win") 1 else 0
  losses <- if (game_outcome == "Loss") 1 else 0
  
  # Step 5: Return a summary data frame
  game_summary <- data.frame(
    Game_ID = 1,  # This could be adjusted to take in a specific game ID if needed
    Total_Rolls = total_rolls,
    Point_Established = point_established,
    Game_Outcome = game_outcome,
    Wins = wins,
    Losses = losses
  )
  
  return(game_summary)
}
```

## Simulating many games {#sec-game-simulation-pseudocode}

```{r}
run_craps_simulation <- function(N) {
  # Input: 
  #   - N: An integer representing the number of games to simulate
  # Output: 
  #   - A data frame where each row summarizes the results of a single game, 
  #     following the structure defined in @sec-game-summary-data
  # Description:
  #   - Simulates N games of craps. For each game, calls simulate_craps_game to get 
  #     detailed roll data, then calls summarize_craps_game to create a summary.
  #   - Combines the summary of each game into a single data frame that contains 
  #     the results of all simulated games.

  # Step 1: Initialize an empty data frame to store summaries of each game
  all_games_summary <- data.frame()

  # Step 2: Loop over N games
  for (i in 1:N) {
    # Simulate a single game and get detailed roll data
    game_data <- simulate_craps_game()
    
    # Summarize the single gameâ€™s data
    game_summary <- summarize_craps_game(game_data)
    
    # Append the game summary to all_games_summary data frame
    all_games_summary <- rbind(all_games_summary, game_summary)
  }
  
  # Step 3: Return the combined data frame with all game summaries
  return(all_games_summary)
}

```

## Planning for implementation

What parts are still missing for you to write code implementing craps based on your pseudocode? 
  I need this: craps_game_overall_summary <- function() and I still need to possibly add code for summary statistics
What do you expect you will need to do before/during the coding process?
  Try different parts of the code to see what and how they are working, including debugging
Make a plan for next week's work. Where will you start?
  Look at the code and print it all out, then see what all the next steps are needed after feedback

